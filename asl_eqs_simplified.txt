#ASL Model
#asl_vars.txt
#asl_pars.txt
Na_a=gamma*max(N_Na_a,0)/H_a
K_a=gamma*max(N_K_a,0)/H_a
Cl_a=gamma*max(N_Cl_a,0)/H_a
OSM_a = (Na_a + K_a + Cl_a + N_IO_a/H_a)*phi_gamma
Na_c = gamma*max(N_Na_c,0)/H_c
K_c = gamma*max(N_K_c,0)/H_c
Cl_c = gamma*max(N_Cl_c,0)/H_c
OSM_c = (Na_c + K_c + Cl_c + N_IO_c/H_c)*phi_gamma
Jh2o_a = p_h2o_a * (OSM_c - OSM_a)
Jh2o_b = p_h2o_b * (OSM_c - OSM_b)
Jh2o_p = p_h2o_p * (OSM_a - OSM_b)
mua = FoverRT * V_a
exp_mua = math.exp(mua)
factor_a = mua/(exp_mua-1.0)
p_Na_a = p_ENaC/(1+(ADO_a/K_ENaC_ADO)**n_ENaC_ADO + (ATP_a/K_ENaC_ATP)**n_ENaC_ATP)
p_K_a = p_BK/(1+ (K_BK/ATP_a)**n_BK)
p_CFTR_a = p_CFTR/(1+(K_CFTR/ADO_a)**n_CFTR + (K_CFTR_ATP/ATP_a)**n_CFTR_ATP )
p_CaCC_a = p_CaCC/(1+ (K_CaCC/ATP_a)**n_CaCC)
p_Cl_a = p_CFTR_a + p_CaCC_a
J_Na_a = p_Na_a * factor_a * (Na_a - Na_c * exp_mua)
J_K_a = p_K_a * factor_a * (K_a - K_c * exp_mua)
J_Cl_a = - p_Cl_a * factor_a * (Cl_c - Cl_a * exp_mua)
mub = FoverRT * V_b
exp_mub = math.exp(mub)
factor_b = mub/(exp_mub-1.0)
p_K_b = p_CaKC/(1+ (K_CaKC/ATP_a)**n_CaKC)
J_K_b = p_K_b * factor_b * (K_b - K_c * exp_mub)
J_Cl_b = - p_Cl_b * factor_b * (Cl_c - Cl_b * exp_mub)
V_t = V_b - V_a
mut = FoverRT * V_t
exp_mut = math.exp(mut)
factor_t = mut/(exp_mut-1.0)
J_Na_p = p_Na_p * factor_t * (Na_b - Na_a * exp_mut)
J_K_p = p_K_p * factor_t * (K_b - K_a * exp_mut)
J_Cl_p = - p_Cl_p * factor_t * (Cl_a - Cl_b * exp_mut)
Jpump = Jpump_max*pow((Na_c/(Na_c+K_pump_Na_in*(1+K_c/K_pump_K_in))),3) * pow((K_b/(K_b+K_pump_K_ext*(1+Na_b/K_pump_Na_ext))),2)
p = np.array([1E8,1E3,0.7428,46.71,458.8,892.3,2724,1824,18781,Cl_b/0.76,Cl_c/0.76,Na_b/0.76,Na_c/0.76,K_b/0.76,K_c/0.76,1])
kon = p[0]
kna = p[1]
kcl1 = p[2]
kcl2 = p[3]
kki = p[4]
kko = p[5]
kna = kon/kna
kcl1 = kon/kcl1
kki = kon/kki
kko = kon/kko
kcl2 = kon/kcl2
kon = kon*1E-3
kbf = p[6]
kff = p[7]
kfe = p[8]
cle = p[9]
cli = p[10]
nae = p[11]
nai = p[12]
ke = p[13]
ki = p[14]
et = p[15]
kbe = kff*kki*kfe/(kbf*kko)
A = np.zeros((9,9))
b = np.zeros((9,1))
flux = np.zeros(3)
e = np.zeros((9,1))
A = np.array([[kon*nae+kbe+kfe, kfe-kna, kfe, kfe, kfe, kfe, kfe, kfe, kfe], [-kon*nae, kna+kon*cle, -kcl1, 0, 0, 0, 0, 0, 0], [0, -kon*cle, kon*ke+kcl1, -kko, 0, 0, 0, 0, 0], [0, 0, -kon*ke, kon*cle+kko, -kcl2, 0, 0, 0, 0 ],[0, 0, 0, -kon*cle, kcl2+kff, -kbf, 0, 0, 0],[0, 0, 0, 0, -kff, kbf+kna, -kon*nai, 0, 0 ],[0, 0, 0, 0, 0, -kna, kon*nai+kcl1, -kon*cli, 0 ], [0, 0, 0, 0,  0, 0, -kcl1, kon*cli+kki, -kon*ki],[kon*cli, kon*cli, kon*cli, kon*cli, kon*cli, kon*cli, kon*cli, kon*cli-kki,  kon*ki+kcl2+kon*cli]])
b = np.array([kfe*et, 0, 0, 0, 0, 0, 0, 0, kon*cli*et])
e = np.linalg.lstsq(A,b)[0]
jj3 = kon*ke*e[2]
jj_3 = kko*e[3]
jj4 = kon*cle*e[3]
jj_4 = kcl2*e[4]
jj5 = kff*e[4]
jj_5 = kbf*e[5]
jj6 = kna*e[5]
jj_6 = kon*nai*e[6]
jj7 = kcl1*e[6]
jj_7 = kon*cli*e[7]
jj8 = kki*e[7]
Jco = (jj5 - jj_5)*1e-3
dN_Na_adt = -J_Na_a + J_Na_p
dN_K_adt = -J_K_a + J_K_p
dN_Cl_adt = -J_Cl_a + J_Cl_p
dH_adt = V_h2o*(-Jh2o_a +Jh2o_p)
dN_Na_cdt = J_Na_a -3*Jpump + Jco
dN_K_cdt = J_K_a + 2*Jpump + Jco + J_K_b
dN_Cl_cdt = J_Cl_a + 2*Jco + J_Cl_b
dH_cdt = V_h2o*(Jh2o_a + Jh2o_b)
Ia = F*(- J_Na_a - J_K_a + J_Cl_a)
Ib = F*(Jpump - J_K_b + J_Cl_b)
Ip = F*(- J_Na_p - J_K_p + J_Cl_p)
dV_adt = (Iext+Ip-Ia)/(C_a)
dV_bdt = -(Iext+Ip+Ib)/(C_b)
r123=v1*ATP_a/(k1+ATP_a)+v2*ATP_a/(k2+ATP_a)+v3*ATP_a/(k3+ATP_a)
r45=v4*ADP_a/(k4+ADP_a)+v5*ADP_a/(k5+ADP_a)
r678=v6*AMP_a/(k6*(1+ATP_a/Ki_atp+ADP_a/Ki_adp)+AMP_a)+v7*AMP_a/(k7*(1+ATP_a/Ki_atp+ADP_a/Ki_adp)+AMP_a)+v8*AMP_a/(k8*(1+ATP_a/Ki_atp+ADP_a/Ki_adp)+AMP_a)
r9=v9*ADO_a/(k9+ADO_a)
r10=v10*ATP_a/(k10+ATP_a)
rAK=vf*ATP_a*AMP_a/(ATP_a*AMP_a+kf_atp*AMP_a+kf_amp*ATP_a+kf_atp*kf_amp)-vb*ADP_a*ADP_a/(ADP_a*ADP_a+kb_adp*kb_adp+2*kb_adp*ADP_a)
j_ado=Vt1*ADO_a/(Kt1+(Kt1/Kt2)*INO_a+ADO_a)
j_ino=Vt2*INO_a/(Kt2+(Kt2/Kt1)*ADO_a+INO_a)
dATP_adt = 	(J_atp-r123-r10-rAK) - ATP_a*dH_adt/H_a
dADP_adt = 	(J_adp+r123-r45+2*rAK) - ADP_a*dH_adt/H_a
dAMP_adt = 	(J_amp+r45+r10-r678-rAK) - AMP_a*dH_adt/H_a
dADO_adt = 	(-j_ado	+ r678 - r9) - ADO_a*dH_adt/H_a
dINO_adt = 	(-j_ino	+ r9) - INO_a*dH_adt/H_a